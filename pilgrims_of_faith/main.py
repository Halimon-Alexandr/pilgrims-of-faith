import sys
import signal
import json
import os
import pytz
import pickle
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from decouple import config
from datetime import datetime, timedelta
from collections import defaultdict
import io
import schedule
from threading import Thread
import time
import logging

last_stats_message = ""
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å–æ–≤–æ—ó –∑–æ–Ω–∏ –ö–∏—ó–≤
kiev_timezone = pytz.timezone("Europe/Kiev")

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç–∞
publish_times = ["06:00", "07:00", "08:00", "10:00", "11:00", "12:00", "14:00", "15:00", "16:00", "18:00", "19:00", "20:00"]

bible = {
    "–ë—É—Ç—Ç—è": "01",
    "–í–∏—Ö—ñ–¥": "02",
    "–õ–µ–≤—ñ—Ç": "03",
    "–ß–∏—Å–ª–∞": "04",
    "–í—Ç–æ—Ä–æ–∑–∞–∫–æ–Ω–Ω—è": "05",
    "–Ü—Å—É—Å–∞ –ù–∞–≤–∏–Ω–∞": "06",
    "–°—É–¥–¥—ñ–≤": "07",
    "–†—É—Ç–∏": "08",
    "1 –°–∞–º—É—ó–ª–∞": "09",
    "2 –°–∞–º—É—ó–ª–∞": "10",
    "1 –¶–∞—Ä—ñ–≤": "11",
    "2 –¶–∞—Ä—ñ–≤": "12",
    "1 –•—Ä–æ–Ω—ñ–∫": "13",
    "2 –•—Ä–æ–Ω—ñ–∫": "14",
    "–ï–∑—Ä–∏": "15",
    "–ù–µ—î–º—ñ—ó": "16",
    "–ï—Å—Ç–µ—Ä–∏": "17",
    "–Ü–æ–≤–∞": "18",
    "–ü—Å–∞–ª–º—ñ–≤": "19",
    "–ü—Ä–∏–ø–æ–≤—ñ–¥–æ–∫": "20",
    "–ü—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫–∞": "21",
    "–ü—ñ—Å–Ω—ñ –ü—ñ—Å–µ–Ω—å": "22",
    "–Ü—Å–∞—ó": "23",
    "–Ñ—Ä–µ–º—ñ—ó": "24",
    "–ü–ª–∞—á –Ñ—Ä–µ–º—ñ—ó": "25",
    "–Ñ–∑–µ–∫–∏—ó–ª–∞": "26",
    "–î–∞–Ω–∏—ó–ª–∞": "27",
    "–û—Å—ñ—ó": "28",
    "–ô–æ—ñ–ª–∞": "29",
    "–ê–º–æ—Å–∞": "30",
    "–ê–≤–¥—ñ—è": "31",
    "–ô–æ–Ω–∏": "32",
    "–ú—ñ—Ö–µ—è": "33",
    "–ù–∞—É–º–∞": "34",
    "–ê–≤–∞–∫—É–º–∞": "35",
    "–°–æ—Ñ–æ–Ω—ñ—ó": "36",
    "–ê–≥–≥–µ—è": "37",
    "–ó–∞—Ö–∞—Ä—ñ—ó": "38",
    "–ú–∞–ª–∞—Ö—ñ—ó": "39",
    "–Ñ–≤–∞–Ω–≥–µ–ª—ñ—î –≤—ñ–¥ –ú–∞—Ç–µ—è": "40",
    "–Ñ–≤–∞–Ω–≥–µ–ª—ñ—î –≤—ñ–¥ –ú–∞—Ä–∫–∞": "41",
    "–Ñ–≤–∞–Ω–≥–µ–ª—ñ—î –≤—ñ–¥ –õ—É–∫–∏": "42",
    "–Ñ–≤–∞–Ω–≥–µ–ª—ñ—î –≤—ñ–¥ –ô–æ–∞–Ω–∞": "43",
    "–î—ñ—è–Ω–Ω—è –∞–ø–æ—Å—Ç–æ–ª—ñ–≤": "44",
    "–ü–æ—Å–ª–∞–Ω–Ω—è –Ø–∫–æ–≤–∞": "45",
    "1 –ü–æ—Å–ª–∞–Ω–Ω—è –ü–µ—Ç—Ä–∞": "46",
    "2 –ü–æ—Å–ª–∞–Ω–Ω—è –ü–µ—Ç—Ä–∞": "47",
    "1 –ü–æ—Å–ª–∞–Ω–Ω—è –ô–æ–∞–Ω–∞": "48",
    "2 –ü–æ—Å–ª–∞–Ω–Ω—è –ô–æ–∞–Ω–∞": "49",
    "3 –ü–æ—Å–ª–∞–Ω–Ω—è –ô–æ–∞–Ω–∞": "50",
    "–ü–æ—Å–ª–∞–Ω–Ω—è –Æ–¥–∏": "51",
    "–ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –†–∏–º–ª—è–Ω": "52",
    "1 –ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –ö–æ—Ä–∏–Ω—Ç—è–Ω": "53",
    "2 –ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –ö–æ—Ä–∏–Ω—Ç—è–Ω": "54",
    "–ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –ì–∞–ª–∞—Ç—ñ–≤": "55",
    "–ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –ï—Ñ–µ—Å—è–Ω": "56",
    "–ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –§–∏–ª–∏–ø'—è–Ω": "57",
    "–ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –ö–æ–ª–æ—Å—è–Ω": "58",
    "1 –ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –°–æ–ª—É–Ω—è–Ω": "59",
    "2 –ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –°–æ–ª—É–Ω—è–Ω": "60",
    "1 –ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –¢–∏–º–æ—Ç–µ—è": "61",
    "2 –ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –¢–∏–º–æ—Ç–µ—è": "62",
    "–ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –¢–∏—Ç–∞": "63",
    "–ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –§–∏–ª–∏–º–æ–Ω–∞": "64",
    "–ü–æ—Å–ª–∞–Ω–Ω—è –¥–æ –Ñ–≤—Ä–µ—ó–≤": "65",
    "–û–¥–∫—Ä–æ–≤–µ–Ω–Ω—è –ô–æ–∞–Ω–∞": "66"
}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
ADMIN = config("TG_CHAT_ADMIN")
GROUP_CHAT_ID = config("TG_GROUP_CHAT_ID")
READING_PLAN_THREAD_ID = config("TG_READING_PLAN_THREAD_ID")
GAME_THREAD_ID = config("TG_GAME_THREAD_ID", default=None)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ TG_Thread_ID
API_TOKEN = config('TG_BOT_TOKEN')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ –¥–∞–Ω–∏—Ö
STATS_DATA_FILE = "stats_data.json"
QUIZ_DATA_FILE = "quiz_data.pickle"
DATA_FILE = "user_data.pickle"

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def save_data():
    with open(DATA_FILE, 'wb') as file:
        pickle.dump(user_data, file)

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'rb') as file:
                return pickle.load(file)
        except (EOFError, pickle.UnpicklingError):
            # –Ø–∫—â–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫
            return {}
    else:
        # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫
        return {}

def reset_user_data():
    now = datetime.now(kiev_timezone)
    current_day = now.strftime('%A').lower()

    if current_day == "monday":
        user_data.clear()
        save_data()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—ñ–∫—Ç–æ—Ä–∏–Ω
def save_quiz_data():
    with open(QUIZ_DATA_FILE, 'wb') as file:
        pickle.dump(quiz_data, file)

def load_quiz_data():
    if os.path.exists(QUIZ_DATA_FILE):
        try:
            with open(QUIZ_DATA_FILE, 'rb') as file:
                return pickle.load(file)
        except (EOFError, pickle.UnpicklingError):
            # –Ø–∫—â–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫
            return {}
    else:
        # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫
        return {}

def reset_quiz_data():
    quiz_data.clear()
    save_quiz_data()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑ JSON —Ñ–∞–π–ª—É
def load_answers():
    with open('answers.json', 'r', encoding='utf-8') as file:
        return json.load(file)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–æ—Ç–∞
def restart_bot():
    python = sys.executable
    os.execl(python, python, *sys.argv)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É —á–∏—Ç–∞–Ω–Ω—è –∑ JSON —Ñ–∞–π–ª—É
def load_reading_plan():
    with open('bible_reading_plan.json', 'r', encoding='utf-8') as file:
        return json.load(file)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def save_stats_data():
    with open(STATS_DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump({'stats_message_id': stats_message_id, 'last_stats_message': last_stats_message}, file, ensure_ascii=False, indent=4)

def load_stats_data():
    global stats_message_id, last_stats_message
    if os.path.exists(STATS_DATA_FILE):
        try:
            with open(STATS_DATA_FILE, 'r', encoding='utf-8') as file:
                data = json.load(file)
                stats_message_id = data.get('stats_message_id')
                last_stats_message = data.get('last_stats_message', "")
        except (EOFError, json.JSONDecodeError):
            stats_message_id = None
            last_stats_message = ""
    else:
        stats_message_id = None
        last_stats_message = ""

# –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–∏—à–µ –∫–æ–ª–∏ –≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ —ñ –∑ —ñ–≥—Ä–æ–≤–æ—ó –≥—ñ–ª–∫–∏
@bot.message_handler(func=lambda message: game_active and message.chat.id == int(GROUP_CHAT_ID)
                      and message.message_thread_id == int(GAME_THREAD_ID))
def check_message(message):
    user_id = message.from_user.id
    text = message.text.strip().lower()  # –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ —ñ–º'—è
    if text in (used_answer.lower() for used_answer in used_answers.keys()):  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö
        bot.send_message(GROUP_CHAT_ID, "‚úÖ –¶–µ —ñ–º'—è –≤–∂–µ –Ω–∞–∑–∏–≤–∞–ª–æ—Å—è!", message_thread_id=int(GAME_THREAD_ID), parse_mode='Markdown')
        return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É, —è–∫—â–æ —ñ–º'—è –≤–∂–µ –±—É–ª–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
    matched = False
    for answer in list(correct_answers):  # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é —Å–ø–∏—Å–∫—É –∫–ª—é—á—ñ–≤ –¥–ª—è —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
        answer_words = answer.split()

        # –Ø–∫—â–æ –±—É–¥—å-—è–∫–µ —Å–ª–æ–≤–æ –∑ —Ç–µ–∫—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º—ñ—Å—Ç–∏—Ç—å—Å—è –≤ –∫–ª—é—á—ñ
        if any(word.lower() == text for word in answer_words):  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            matched = True  # –í—ñ–¥–∑–Ω–∞—á–∞—î–º–æ, —â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥
            # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞, –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if user_id not in user_scores:
                user_scores[user_id] = 0
            user_scores[user_id] += 1

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            correct_answer_message = (
                f"‚úÖ –¢–∞–∫, –≤—ñ—Ä–Ω–æ! –Ñ —Ç–∞–∫–µ —ñ–º'—è: *{answer}*, –≤–æ–Ω–æ –∑–≥–∞–¥—É—î—Ç—å—Å—è —Ç—É—Ç: \n*{correct_answers[answer]}*.\n"
                f"üéâ –£ —Ç–µ–±–µ –≤–∂–µ {user_scores[user_id]} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π! üéâ"
            )

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç—É –∂ –≥—ñ–ª–∫—É
            bot.send_message(GROUP_CHAT_ID, correct_answer_message, message_thread_id=int(GAME_THREAD_ID), parse_mode='Markdown')

            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
            used_answers[answer] = correct_answers[answer]  # –î–æ–¥–∞—î–º–æ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö
            del correct_answers[answer]  # –í–∏–¥–∞–ª—è—î–º–æ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ

            break  # –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É, –±–æ –≤–∂–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å

    # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if not matched:
        error_message = "‚ùå –ù–∞–∂–∞–ª—å, —è —Ü–µ —ñ–º'—è –Ω–µ –∑–Ω–∞—é."
        bot.send_message(GROUP_CHAT_ID, error_message, message_thread_id=int(GAME_THREAD_ID), parse_mode='Markdown')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–ª–∞–Ω—É —á–∏—Ç–∞–Ω–Ω—è
def publish_reading(entry, index, total):
    book = entry['book']
    chapter = entry['chapter']

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∫–Ω–∏–≥–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–ª–æ–≤–Ω–∏–∫–∞
    book_dir = bible.get(book)

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —á–æ—Ç–∏—Ä—å–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup()
    button_khomenko = InlineKeyboardButton(
        text="–•–æ–º–µ–Ω–∫–∞",
        url=f"http://mog-pod.pp.ua/bible/UBIH/book{book_dir}/{chapter}/"
    )
    button_modern = InlineKeyboardButton(
        text="–°—É—á–∞—Å–Ω–∏–π",
        url=f"http://mog-pod.pp.ua/bible/CUV/book{book_dir}/{chapter}/"
    )
    button_turkonyak = InlineKeyboardButton(
        text="–¢—É—Ä–∫–æ–Ω—è–∫–∞",
        url=f"http://mog-pod.pp.ua/bible/–£–¢–¢/book{book_dir}/{chapter}/"
    )
    button_ogiyenko = InlineKeyboardButton(
        text="–û–≥—ñ—î–Ω–∫–∞",
        url=f"http://mog-pod.pp.ua/bible/UBIO/book{book_dir}/{chapter}/"

)
    keyboard.add(button_ogiyenko, button_khomenko, button_modern, button_turkonyak)

    if book_dir:
        file_name = f"{int(chapter):03d}.ogg"  # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ä–æ–∑–¥—ñ–ª—É —É –≤–∏–≥–ª—è–¥—ñ 001, 002 —ñ —Ç.–¥.
        file_path = os.path.join("bible", book_dir, file_name)

        if os.path.exists(file_path):
            try:
                with open(file_path, 'rb') as ogg_file:
                    ogg_data = io.BytesIO(ogg_file.read())

                message = f"üìñ –ü–ª–∞–Ω —á–∏—Ç–∞–Ω–Ω—è {index} —ñ–∑ {total}:\n–ö–Ω–∏–≥–∞ {book}, –†–æ–∑–¥—ñ–ª {chapter} ‚ú®"
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
                bot.send_voice(GROUP_CHAT_ID, ogg_data, caption=message, reply_markup=keyboard, message_thread_id=READING_PLAN_THREAD_ID)
            except Exception as e:
                bot.send_message(ADMIN, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É: {e}")
        else:
            message = f"üìñ –ü–ª–∞–Ω —á–∏—Ç–∞–Ω–Ω—è {index} —ñ–∑ {total}:\n–ö–Ω–∏–≥–∞ {book}, –†–æ–∑–¥—ñ–ª {chapter} ‚ú®"
            bot.send_message(GROUP_CHAT_ID, message, reply_markup=keyboard, message_thread_id=READING_PLAN_THREAD_ID)
    else:
        message = f"üìñ –ü–ª–∞–Ω —á–∏—Ç–∞–Ω–Ω—è {index} —ñ–∑ {total}:\n–ö–Ω–∏–≥–∞ {book}, –†–æ–∑–¥—ñ–ª {chapter} ‚ú®"
        bot.send_message(GROUP_CHAT_ID, message, reply_markup=keyboard, message_thread_id=READING_PLAN_THREAD_ID)

    entry['published'] = True

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏
def publish_quiz(quiz):
    question = quiz['question']
    options = quiz['answers']
    correct_option_id = quiz.get('correct_option_id')
    explanation = quiz.get('comment', '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –Ω–∞–¥–∞–Ω–∞.')  # –î–æ–¥–∞—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è

    if not isinstance(correct_option_id, int) or correct_option_id < 0 or correct_option_id >= len(options):
        return

    message = bot.send_poll(
        GROUP_CHAT_ID,
        question,
        options,
        is_anonymous=False,
        type='quiz',
        correct_option_id=correct_option_id,
        explanation=explanation,
        message_thread_id=READING_PLAN_THREAD_ID
    )
    quiz_data[message.poll.id] = {"correct_option_id": correct_option_id}
    save_quiz_data()
    quiz['published'] = True

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–ª–∞–Ω—É —á–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω
def manual_publish_reading_and_quizzes():
    today = datetime.now(kiev_timezone).strftime('%m-%d')

    if today in reading_plan:
        daily_plan = reading_plan[today]

        for idx, entry in enumerate(daily_plan):
            if not entry.get('published', False):
                total_readings = len(daily_plan)
                publish_reading(entry, idx + 1, total_readings)
                entry['published'] = True

                with open('bible_reading_plan.json', 'w', encoding='utf-8') as file:
                    json.dump(reading_plan, file, ensure_ascii=False, indent=4)

                return

            if 'quizzes' in entry:
                for quiz in entry['quizzes']:
                    if not quiz.get('published', False):
                        publish_quiz(quiz)
                        quiz['published'] = True

                        with open('bible_reading_plan.json', 'w', encoding='utf-8') as file:
                            json.dump(reading_plan, file, ensure_ascii=False, indent=4)

                        return


# –§—É–Ω–∫—Ü—ñ—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω
def publish_daily_quiz_statistics():
    global stats_message_id, last_stats_message
    now = datetime.now(kiev_timezone)
    today_weekday = now.strftime("%A").lower()

    # –ü–µ—Ä–µ–∫–ª–∞–¥ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
    days_translation = {
        "monday": "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫",
        "tuesday": "–í—ñ–≤—Ç–æ—Ä–æ–∫",
        "wednesday": "–°–µ—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä",
        "friday": "–ü'—è—Ç–Ω–∏—Ü—è",
        "saturday": "–°—É–±–æ—Ç–∞",
        "sunday": "–ù–µ–¥—ñ–ª—è"
    }
    day_of_week_ua = days_translation.get(today_weekday, today_weekday)

    # –ü–µ—Ä–µ–∫–ª–∞–¥ –º—ñ—Å—è—Ü—ñ–≤
    months_translation = {
        "january": "—Å—ñ—á–Ω—è",
        "february": "–ª—é—Ç–æ–≥–æ",
        "march": "–±–µ—Ä–µ–∑–Ω—è",
        "april": "–∫–≤—ñ—Ç–Ω—è",
        "may": "—Ç—Ä–∞–≤–Ω—è",
        "june": "—á–µ—Ä–≤–Ω—è",
        "july": "–ª–∏–ø–Ω—è",
        "august": "—Å–µ—Ä–ø–Ω—è",
        "september": "–≤–µ—Ä–µ—Å–Ω—è",
        "october": "–∂–æ–≤—Ç–Ω—è",
        "november": "–ª–∏—Å—Ç–æ–ø–∞–¥–∞",
        "december": "–≥—Ä—É–¥–Ω—è"
    }
    month_ua = months_translation.get(now.strftime("%B").lower(), now.strftime("%B").lower())

    day_number = now.weekday() + 1

    stats_message = f"{day_of_week_ua} {now.day} {month_ua}\n"
    total_quizzes_today = 0
    stats = defaultdict(lambda: {'today': 0})

    # Count the total number of quizzes for today
    for entry in reading_plan.get(now.strftime('%m-%d'), []):
        if 'quizzes' in entry:
            total_quizzes_today += len(entry['quizzes'])

    # Collect today's statistics
    for user_id, data in user_data.items():
        name = data["name"]
        today_correct = data["correct_answers"].get(today_weekday, 0)
        if today_correct > 0:
            stats[user_id]['today'] = today_correct

    # Sort users by today's correct answers
    sorted_stats = sorted(stats.items(), key=lambda x: x[1]['today'], reverse=True)

    if not sorted_stats:
        stats_message += "–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ–∫–∏—â–æ –Ω–µ–º–∞—î.\n"
    else:
        stats_message += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–∫—Ç–æ—Ä–∏–Ω: {total_quizzes_today}\n"
        stats_message += "–ù–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n"
        for user_id, stat in sorted_stats:
            user_name = user_data[user_id]['name']
            today_correct = stat['today']
            stats_message += f"{user_name}: {today_correct}.\n"

    # Check if the content of the message has changed
    if stats_message == last_stats_message:
        return

    if stats_message_id:
        bot.edit_message_text(stats_message, GROUP_CHAT_ID, stats_message_id)
    else:
        message = bot.send_message(GROUP_CHAT_ID, stats_message, message_thread_id=READING_PLAN_THREAD_ID)
        stats_message_id = message.message_id
        bot.pin_chat_message(GROUP_CHAT_ID, stats_message_id)

    # Save the last stats message and message ID
    last_stats_message = stats_message
    save_stats_data()


# –§—É–Ω–∫—Ü—ñ—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω
def publish_quiz_statistics():
    now = datetime.now(kiev_timezone)
    today_str = now.strftime('%m-%d')
    today_weekday = now.strftime("%A").lower()
    days_translation = {
        "Monday": "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫",
        "Tuesday": "–í—ñ–≤—Ç–æ—Ä–æ–∫",
        "Wednesday": "–°–µ—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä",
        "Friday": "–ü'—è—Ç–Ω–∏—Ü—è",
        "Saturday": "–°—É–±–æ—Ç–∞",
        "Sunday": "–ù–µ–¥—ñ–ª—è"
    }
    day_of_week = now.strftime("%A")
    day_of_week_ua = days_translation.get(day_of_week, day_of_week)
    day_number = now.weekday() + 1
    if day_number == 1:
        stats_message = f"–°—å–æ–≥–æ–¥–Ω—ñ {day_of_week_ua}, –ø–µ—Ä—à–∏–π –¥–µ–Ω—å –º–∞—Ä–∞—Ñ–æ–Ω—É. üéâ üèÉ"
    elif day_number == 7:
        stats_message = f"–°—å–æ–≥–æ–¥–Ω—ñ {day_of_week_ua}, –æ—Å—Ç–∞–Ω–Ω—ñ–π —ñ –∑–∞–∫–ª—é—á–Ω–∏–π –¥–µ–Ω—å –º–∞—Ä–∞—Ñ–æ–Ω—É. üéÜ üèÅ"
    else:
        stats_message = f"–°—å–æ–≥–æ–¥–Ω—ñ {day_of_week_ua}, {day_number}-–π –¥–µ–Ω—å –º–∞—Ä–∞—Ñ–æ–Ω—É. üèÉ"
    total_quizzes_week = 0
    start_date = (now - timedelta(days=now.weekday())).strftime('%m-%d')
    for date, entries in reading_plan.items():
        if start_date <= date <= today_str:
            total_quizzes_week += sum(len(entry.get('quizzes', [])) for entry in entries)
    total_correct_week = 0
    stats = defaultdict(lambda: {'weekly': 0, 'today': 0})
    fully_correct_users = 0
    week_days = [(now - timedelta(days=i)).strftime('%A').lower() for i in range(now.weekday() + 1)]
    for user_id, data in user_data.items():
        name = data["name"]
        weekly_correct = 0
        today_correct = 0
        for day_str, count in data["correct_answers"].items():
            if day_str in week_days:
                weekly_correct += count
                total_correct_week += count
                if day_str == today_weekday:
                    today_correct += count
        stats[user_id]['weekly'] = weekly_correct
        stats[user_id]['today'] = today_correct
        if weekly_correct >= total_quizzes_week and total_quizzes_week > 0:
            fully_correct_users += 1
    total_participants_week = len(user_data)
    sorted_stats = sorted(stats.items(), key=lambda x: x[1]['weekly'], reverse=True)
    stats_message += f"\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–∫—Ç–æ—Ä–∏–Ω: {total_quizzes_week}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_participants_week}\n"
    stats_message += f"üèÜ –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–æ–ø-10 –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫:\n"
    stats_message += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á | –ó–∞ —Ç–∏–∂–¥–µ–Ω—å | –°—å–æ–≥–æ–¥–Ω—ñ.\n"
    for i, (user_id, stat) in enumerate(sorted_stats[:10], start=1):
        user_name = user_data[user_id]['name']
        weekly_correct = stat['weekly']
        today_correct = stat['today']
        stats_message += f"{user_name} | {weekly_correct} | {today_correct}.\n"

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(GROUP_CHAT_ID, stats_message, message_thread_id=251)
    



# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è–º
def check_unpublished_content():
    now = datetime.now(kiev_timezone)
    today_str = now.strftime('%m-%d')

    total_readings = 0
    published_readings = 0
    unpublished_readings = 0

    total_quizzes = 0
    published_quizzes = 0
    unpublished_quizzes = 0

    if today_str in reading_plan:
        daily_plan = reading_plan[today_str]

        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–ª–∞–Ω—ñ–≤ —á–∏—Ç–∞–Ω–Ω—è
        total_readings = len(daily_plan)
        for entry in daily_plan:
            if entry.get('published', False):
                published_readings += 1
            else:
                unpublished_readings += 1

            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–∫—Ç–æ—Ä–∏–Ω
            if 'quizzes' in entry:
                total_quizzes += len(entry['quizzes'])
                for quiz in entry['quizzes']:
                    if quiz.get('published', False):
                        published_quizzes += 1
                    else:
                        unpublished_quizzes += 1

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = (
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å –ø–∏—Å–∞–Ω–Ω—è: {total_readings}, –∑ –Ω–∏—Ö –Ω–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {unpublished_readings}.\n"
        f"\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–∫—Ç–æ—Ä–∏–Ω: {total_quizzes}, –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {unpublished_quizzes}.\n"
    )

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.send_message(ADMIN, message)

# –û–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω—å –ø–æ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞–º
@bot.poll_answer_handler()
def handle_poll_answer(poll_answer):
    user_id = poll_answer.user.id
    selected_option = poll_answer.option_ids[0]
    poll_id = poll_answer.poll_id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if poll_id in quiz_data:
        correct_option_id = quiz_data[poll_id]['correct_option_id']
        day_of_week = datetime.now(kiev_timezone).strftime("%A").lower()

        if selected_option == correct_option_id:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
            if user_id not in user_data:
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                first_name = poll_answer.user.first_name if poll_answer.user.first_name else ""
                last_name = poll_answer.user.last_name if poll_answer.user.last_name else ""
                full_name = f"{first_name} {last_name}" if first_name and last_name else first_name or "–±–µ–∑ —ñ–º–µ–Ω—ñ"

                user_data[user_id] = {
                    "name": full_name,
                    "correct_answers": {}
                }

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            if day_of_week not in user_data[user_id]["correct_answers"]:
                user_data[user_id]["correct_answers"][day_of_week] = 0
            user_data[user_id]["correct_answers"][day_of_week] += 1

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    save_data()
    publish_daily_quiz_statistics()

# –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ –±–æ—Ç
@bot.message_handler(content_types=['document'])
def handle_document_message(message):
    document_id = message.document.file_id
    file_info = bot.get_file(document_id)
    file_path = file_info.file_path

    download_path = os.path.join(os.getcwd(), message.document.file_name)

    try:
        with open(download_path, 'wb') as file:
            file.write(bot.download_file(file_path))
        reading_plan = load_reading_plan()
        bot.send_message(message.chat.id, f"–§–∞–π–ª '{message.document.file_name}' —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –±–æ—Ç–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏
def start_game(message):
    global game_active, correct_answers

    if str(message.from_user.id) != ADMIN:
        bot.reply_to(message, "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É.")
        return

    game_active = True
    correct_answers = load_answers()  # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    used_answers.clear()  # –û—á–∏—â–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π

    game_start_message = (
        """**–î—Ä—É–∑—ñ!** üåü

–Ø –Ω–µ—â–æ–¥–∞–≤–Ω–æ –¥–æ—Å–ª—ñ–¥–∂—É–≤–∞–≤ –∫–Ω–∏–≥–∏ –ù–æ–≤–æ–≥–æ –ó–∞–≤—ñ—Ç—É —ñ –∑ –≤–µ–ª–∏–∫–∏–º —ñ–Ω—Ç–µ—Ä–µ—Å–æ–º –ø–æ–º—ñ—Ç–∏–≤, —â–æ —Ç–∞–º –∑–≥–∞–¥—É—î—Ç—å—Å—è –±–µ–∑–ª—ñ—á –∂—ñ–Ω–æ—á–∏—Ö —ñ–º–µ–Ω. üíñ

–Ø–∫—â–æ –≤–∏ –Ω–∞–ø–∏—à–µ—Ç–µ —ñ–º–µ–Ω–∞, —è–∫—ñ —è —Ç–∞–º –∑–Ω–∞–π—à–æ–≤, —Ç–æ –∑–∞ –∫–æ–∂–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –±–∞–ª. üéâ

**–ö—Ä–∞—â–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —è –≤—ñ–¥–∑–Ω–∞—á—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ!** üèÜ

–ì—Ä–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—è! –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏! üìú"""
    )

    if GAME_THREAD_ID:  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ THREAD_ID, —è–∫—â–æ –≤–æ–Ω–æ –≤–∏–∑–Ω–∞—á–µ–Ω–µ
        bot.send_message(GROUP_CHAT_ID, game_start_message, message_thread_id=int(GAME_THREAD_ID), parse_mode='Markdown')
    else:
        bot.send_message(GROUP_CHAT_ID, game_start_message, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –≥—Ä–∏
def stop_game(message):
    global game_active

    if str(message.from_user.id) != ADMIN:
        bot.reply_to(message, "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –≥—Ä—É.")
        return

    game_active = False
    if GAME_THREAD_ID:
        bot.send_message(GROUP_CHAT_ID, "–ì—Ä—É –∑—É–ø–∏–Ω–µ–Ω–æ! –û—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:", message_thread_id=int(GAME_THREAD_ID))
    else:
        bot.send_message(GROUP_CHAT_ID, "–ì—Ä—É –∑—É–ø–∏–Ω–µ–Ω–æ! –û—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:")

    # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if user_scores:
        stats = "\n".join([f"{bot.get_chat_member(GROUP_CHAT_ID, user_id).user.first_name}: {score}" for user_id, score in user_scores.items()])
        if GAME_THREAD_ID:
            bot.send_message(GROUP_CHAT_ID, stats, message_thread_id=int(GAME_THREAD_ID))
        else:
            bot.send_message(GROUP_CHAT_ID, stats)
    else:
        if GAME_THREAD_ID:
            bot.send_message(GROUP_CHAT_ID, "–ù—ñ—Ö—Ç–æ –Ω–µ –¥–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.", message_thread_id=int(GAME_THREAD_ID))
        else:
            bot.send_message(GROUP_CHAT_ID, "–ù—ñ—Ö—Ç–æ –Ω–µ –¥–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")

    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏
    user_scores.clear()

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
    last_name = message.from_user.last_name or ""

    full_name = f"{first_name} {last_name}".strip()

    welcome_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {full_name}! üòä\n\n"
        "–Ø –±–æ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –ø—Ä–∞–≥–Ω–µ –ø–æ–≥–ª–∏–±–∏—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –ë—ñ–±–ª—ñ—ó. üìñ –ú–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —Å–∫–ª–∞—Å—Ç–∏ –ø–ª–∞–Ω —á–∏—Ç–∞–Ω–Ω—è –°–≤—è—Ç–æ–≥–æ –ü–∏—Å—å–º–∞ "
        "—Ç–∞ –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ —Ü—ñ–∫–∞–≤—ñ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏, —è–∫—ñ –∑—Ä–æ–±–ª—è—Ç—å —Ü–µ–π –ø—Ä–æ—Ü–µ—Å —â–µ –±—ñ–ª—å—à –∑–∞—Ö–æ–ø–ª–∏–≤–∏–º! üìùü§ì\n\n"
        "‚ùóÔ∏è–©–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–ª–∞–Ω —á–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞—Ö, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: [t.me/PilgrimsOfFaith](https://t.me/PilgrimsOfFaith) üîó\n\n"
        "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É: '–î–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏'\n\n"
        "–ë–∞–∂–∞—é –≤–∞–º –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏—î–º–Ω–æ–≥–æ —á–∞—Å—É –∑ –ë—ñ–±–ª—ñ—î—é! üôè‚ú®"
    )

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if str(user_id) == ADMIN:
        start_game_button = types.KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É")
        stop_game_button = types.KeyboardButton("–ó—É–ø–∏–Ω–∏—Ç–∏ –≥—Ä—É")
        publish_stats_button = types.KeyboardButton("–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        publish_content_button = types.KeyboardButton("–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç")
        get_stats_button = types.KeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π")
        restart_bot_button = types.KeyboardButton("–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–æ—Ç–∞")

        keyboard.add(start_game_button, stop_game_button)
        keyboard.add(publish_stats_button, publish_content_button)
        keyboard.add(get_stats_button)
        keyboard.add(restart_bot_button)
    else:
        join_group_button = types.KeyboardButton("–î–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏")
        keyboard.add(join_group_button)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é
    bot.send_message(message.chat.id, welcome_text, reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ –∑ –±–æ—Ç–æ–º
@bot.message_handler(func=lambda message: message.chat.type == 'private')
def handle_private_message(message):
    global game_active, correct_answers

    user_id = message.from_user.id

    if message.text.strip() == "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É" and str(user_id) == ADMIN:
        start_game(message)

    elif message.text.strip() == "–ó—É–ø–∏–Ω–∏—Ç–∏ –≥—Ä—É" and str(user_id) == ADMIN:
        stop_game(message)

    elif message.text.strip() == "–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" and str(user_id) == ADMIN:
        publish_quiz_statistics()

    elif message.text.strip() == "–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç" and str(user_id) == ADMIN:
        manual_publish_reading_and_quizzes()

    elif message.text.strip() == "–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π" and str(user_id) == ADMIN:
        check_unpublished_content()

    elif message.text.strip() == "–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–æ—Ç–∞" and str(user_id) == ADMIN:
        bot.send_message(message.chat.id, "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...")
        time.sleep(10)  # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
        restart_bot()

    elif message.text.strip() == "–î–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏":
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, —â–æ–± –¥–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏: [t.me/PilgrimsOfFaith](https://t.me/PilgrimsOfFaith)")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—É —ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
def check_and_publish():
    now = datetime.now(kiev_timezone)
    current_time = now.strftime('%H:%M')

    # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
    if current_time in publish_times:
        manual_publish_reading_and_quizzes()

    # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if current_time == "23:00":
        publish_quiz_statistics()

    # –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—ñ–∫—Ç–æ—Ä–∏–Ω
    if current_time == "00:00":
        reset_quiz_data()
        reset_user_data()
        publish_daily_quiz_statistics()
    publish_daily_quiz_statistics()

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫, —è–∫–∏–π –∑–∞–ø—É—Å–∫–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
def run_schedulers():
    while True:
        check_and_publish()

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
        now = datetime.now(kiev_timezone)

        # –û–±—á–∏—Å–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥–æ–¥–∏–Ω–∏
        next_hour = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
        time_to_next_hour = (next_hour - now).total_seconds()

        # –û—á—ñ–∫—É—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥–æ–¥–∏–Ω–∏
        time.sleep(time_to_next_hour)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
def run_bot():
    while True:
        try:
            bot.polling()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞: {e}")
            logger.info("–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–æ—Ç–∞...")
            time.sleep(10)  # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
            restart_bot()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ —Ç–∞ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
# –î–ª—è –≥—Ä–∏
correct_answers = load_answers()
used_answers = {}
user_scores = {}
game_active = False

#  –î–ª—è –ø–ª–∞–Ω—É —á–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω
load_stats_data()
user_data = load_data()
quiz_data = load_quiz_data()
reading_plan = load_reading_plan()
scheduler_thread = Thread(target=run_schedulers)
scheduler_thread.start()
check_unpublished_content()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
run_bot()
